-- Drop tables and functions safely if they exist
drop table if exists public.friends;
drop table if exists public.messages;

-- Create public.friends table
create table if not exists public.friends (
    user_id uuid not null,
    friend_id uuid not null,
    created_at timestamp with time zone not null default now(),
    primary key (user_id, friend_id),
    constraint friends_user_id_fkey foreign key (user_id) references auth.users (id) on delete cascade,
    constraint friends_friend_id_fkey foreign key (friend_id) references auth.users (id) on delete cascade
);
alter table public.friends enable row level security;

-- Create public.messages table
create table if not exists public.messages (
    id bigint generated by default as identity,
    sender_id uuid not null,
    receiver_id uuid not null,
    content text not null,
    created_at timestamp with time zone not null default now(),
    primary key (id),
    constraint messages_sender_id_fkey foreign key (sender_id) references public.profiles (id) on delete cascade,
    constraint messages_receiver_id_fkey foreign key (receiver_id) references public.profiles (id) on delete cascade
);
alter table public.messages enable row level security;


-- Add missing columns to profiles table if they don't exist
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_attribute WHERE attrelid = 'public.profiles'::regclass AND attname = 'full_name') THEN
    ALTER TABLE public.profiles ADD COLUMN full_name text;
  END IF;
  IF NOT EXISTS (SELECT 1 FROM pg_attribute WHERE attrelid = 'public.profiles'::regclass AND attname = 'avatar_url') THEN
    ALTER TABLE public.profiles ADD COLUMN avatar_url text;
  END IF;
  IF NOT EXISTS (SELECT 1 FROM pg_attribute WHERE attrelid = 'public.profiles'::regclass AND attname = 'data_ai_hint') THEN
    ALTER TABLE public.profiles ADD COLUMN data_ai_hint text;
  END IF;
  IF NOT EXISTS (SELECT 1 FROM pg_attribute WHERE attrelid = 'public.profiles'::regclass AND attname = 'is_admin') THEN
    ALTER TABLE public.profiles ADD COLUMN is_admin boolean default false;
  END IF;
  IF NOT EXISTS (SELECT 1 FROM pg_attribute WHERE attrelid = 'public.profiles'::regclass AND attname = 'email') THEN
    ALTER TABLE public.profiles ADD COLUMN email text;
  END IF;
END;
$$;


-- Function to create a profile for a new user
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, display_name, full_name, email)
  values (
    new.id, 
    new.raw_user_meta_data->>'display_name',
    new.raw_user_meta_data->>'full_name',
    new.email
  );
  return new;
end;
$$;

-- Trigger to call handle_new_user on new user creation
drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- Secure function to update a user's own profile
create or replace function public.update_user_profile(new_full_name text)
returns void
language plpgsql
security definer set search_path = public
as $$
begin
  update public.profiles
  set full_name = new_full_name, display_name = new_full_name
  where id = auth.uid();
end;
$$;


-- RLS Policies
drop policy if exists "Public profiles are viewable by everyone." on public.profiles;
create policy "Public profiles are viewable by everyone."
  on public.profiles for select
  using ( true );

drop policy if exists "Users can insert their own profile." on public.profiles;
create policy "Users can insert their own profile."
  on public.profiles for insert
  with check ( auth.uid() = id );

drop policy if exists "Users can update their own profile." on public.profiles;
create policy "Users can update their own profile."
  on public.profiles for update
  using (true)
  with check ( auth.uid() = id );

drop policy if exists "Users can view their own friends" on public.friends;
create policy "Users can view their own friends"
  on public.friends for select
  using ( auth.uid() = user_id );

drop policy if exists "Users can add friends" on public.friends;
create policy "Users can add friends"
  on public.friends for insert
  with check ( auth.uid() = user_id );
  
drop policy if exists "Users can remove their own friends" on public.friends;
create policy "Users can remove their own friends"
    on public.friends for delete
    using (auth.uid() = user_id);

drop policy if exists "Users can view messages they sent or received" on public.messages;
create policy "Users can view messages they sent or received"
  on public.messages for select
  using ( auth.uid() = sender_id or auth.uid() = receiver_id );

drop policy if exists "Users can insert their own messages" on public.messages;
create policy "Users can insert their own messages"
  on public.messages for insert
  with check ( auth.uid() = sender_id );

drop policy if exists "Users can delete their own messages" on public.messages;
create policy "Users can delete their own messages"
    on public.messages for delete
    using (auth.uid() = sender_id);
