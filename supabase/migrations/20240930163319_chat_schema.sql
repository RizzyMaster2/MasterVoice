
-- Drop existing policies on profiles to ensure a clean slate
drop policy if exists "Public profiles are viewable by everyone." on public.profiles;
drop policy if exists "Users can insert their own profile." on public.profiles;
drop policy if exists "Users can update their own profile." on public.profiles;

-- Create a table for public profiles
create table if not exists public.profiles (
  id uuid references auth.users on delete cascade not null primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  display_name text,
  full_name text,
  email text,
  photo_url text,
  status text,
  bio text
);

-- Set up Row Level Security (RLS)
alter table public.profiles enable row level security;

-- POLICIES for profiles
create policy "Public profiles are viewable by everyone." on public.profiles
  for select using (true);

create policy "Users can insert their own profile." on public.profiles
  for insert with check (auth.uid() = id);

create policy "Users can update their own profile." on public.profiles
  for update using (auth.uid() = id) with check (auth.uid() = id);

-- This trigger automatically creates a profile entry when a new user signs up
drop function if exists public.handle_new_user();
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, full_name, display_name, photo_url, email)
  values (
    new.id,
    new.raw_user_meta_data->>'full_name',
    new.raw_user_meta_data->>'display_name',
    new.raw_user_meta_data->>'avatar_url',
    new.email
  );
  return new;
end;
$$;

-- Drop the trigger if it exists, then recreate it
drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- Table for messages
create table if not exists public.messages (
  id bigint generated by default as identity primary key,
  sender_id uuid references public.profiles on delete cascade not null,
  receiver_id uuid references public.profiles on delete cascade not null,
  content text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table public.messages enable row level security;

-- POLICIES for messages
create policy "Users can view their own messages." on public.messages
  for select using (auth.uid() = sender_id or auth.uid() = receiver_id);

create policy "Users can send messages." on public.messages
  for insert with check (auth.uid() = sender_id);
  
create policy "Users can delete their own messages." on public.messages
    for delete using (auth.uid() = sender_id);


-- Table for friends
create table if not exists public.friends (
    user_id uuid references public.profiles on delete cascade not null,
    friend_id uuid references public.profiles on delete cascade not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    primary key (user_id, friend_id)
);

alter table public.friends enable row level security;

-- POLICIES for friends
create policy "Users can view their own friend list." on public.friends
  for select using (auth.uid() = user_id);

create policy "Users can add friends." on public.friends
  for insert with check (auth.uid() = user_id);
  
create policy "Users can remove friends." on public.friends
  for delete using (auth.uid() = user_id);
  
-- Table for friend requests
create table if not exists public.friend_requests (
    id bigint generated by default as identity primary key,
    sender_id uuid references public.profiles on delete cascade not null,
    receiver_id uuid references public.profiles on delete cascade not null,
    status text check (status in ('pending', 'accepted', 'declined')) default 'pending',
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    unique(sender_id, receiver_id)
);

alter table public.friend_requests enable row level security;

-- POLICIES for friend_requests
create policy "Users can see their own friend requests." on public.friend_requests
  for select using (auth.uid() = sender_id or auth.uid() = receiver_id);
  
create policy "Users can send friend requests." on public.friend_requests
  for insert with check (auth.uid() = sender_id);

create policy "Users can update their received friend requests." on public.friend_requests
  for update using (auth.uid() = receiver_id);


-- STORAGE
insert into storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
values ('files', 'files', true, 5242880, '{"image/jpeg","image/png","image/gif","image/webp"}')
on conflict (id) do nothing;

create policy "Users can upload their own avatar"
on storage.objects for insert
to authenticated
with check (
    bucket_id = 'files' and
    (select auth.uid()::text) = (storage.foldername(name))[1]
);

create policy "Users can update their own avatar"
on storage.objects for update
to authenticated
with check (
    bucket_id = 'files' and
    (select auth.uid()::text) = (storage.foldername(name))[1]
);

create policy "Users can view their own and public avatars"
on storage.objects for select
to authenticated
using (
    bucket_id = 'files'
);
