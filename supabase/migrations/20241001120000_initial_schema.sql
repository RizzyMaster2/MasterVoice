-- Create custom enum types
create type public.request_status as enum ('pending', 'accepted', 'declined');

-- Create a table for public profiles
create table if not exists public.profiles (
  id uuid not null primary key,
  created_at timestamp with time zone not null default now(),
  display_name text,
  full_name text,
  email text,
  photo_url text,
  status text,
  bio text
);

-- Create a table for friendships (direct, two-way)
create table if not exists public.friends (
  user_id uuid not null references public.profiles(id) on delete cascade,
  friend_id uuid not null references public.profiles(id) on delete cascade,
  created_at timestamp with time zone not null default now(),
  primary key (user_id, friend_id)
);

-- Create a table for friend requests
create table if not exists public.friend_requests (
  id bigint generated by default as identity primary key,
  sender_id uuid not null references public.profiles(id) on delete cascade,
  receiver_id uuid not null references public.profiles(id) on delete cascade,
  status public.request_status not null default 'pending',
  created_at timestamp with time zone not null default now(),
  unique(sender_id, receiver_id)
);

-- Create a table for direct messages
create table if not exists public.messages (
  id bigint generated by default as identity primary key,
  sender_id uuid not null references public.profiles(id) on delete cascade,
  receiver_id uuid not null references public.profiles(id) on delete cascade,
  content text not null,
  created_at timestamp with time zone not null default now()
);

-- Set up the function to handle new user creation
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name, display_name, photo_url, email)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'display_name', new.raw_user_meta_data->>'avatar_url', new.email);
  return new;
end;
$$ language plpgsql security definer;

-- Set up the trigger on the auth.users table
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Enable Row Level Security for all tables
alter table public.profiles enable row level security;
alter table public.friends enable row level security;
alter table public.friend_requests enable row level security;
alter table public.messages enable row level security;

-- Drop existing policies on profiles before creating new ones to avoid conflicts
drop policy if exists "Public profiles are viewable by everyone." on public.profiles;
drop policy if exists "Users can insert their own profile." on public.profiles;
drop policy if exists "Users can update their own profile." on public.profiles;

-- RLS Policies for profiles
create policy "Public profiles are viewable by everyone."
  on public.profiles for select
  using (true);

create policy "Users can insert their own profile."
  on public.profiles for insert
  with check (auth.uid() = id);

create policy "Users can update their own profile."
  on public.profiles for update
  using (auth.uid() = id)
  with check (auth.uid() = id);

-- RLS Policies for friends
create policy "Users can see their own friendships."
  on public.friends for select
  using (auth.uid() = user_id);

create policy "Users can create their own friendships."
  on public.friends for insert
  with check (auth.uid() = user_id);
  
create policy "Users can delete their own friendships."
  on public.friends for delete
  using (auth.uid() = user_id);

-- RLS Policies for friend_requests
create policy "Users can see friend requests they sent or received."
  on public.friend_requests for select
  using (auth.uid() = sender_id or auth.uid() = receiver_id);

create policy "Users can send friend requests."
  on public.friend_requests for insert
  with check (auth.uid() = sender_id);
  
create policy "Users can update friend requests they received."
  on public.friend_requests for update
  using (auth.uid() = receiver_id);

-- RLS Policies for messages
create policy "Users can see messages they sent or received."
  on public.messages for select
  using (auth.uid() = sender_id or auth.uid() = receiver_id);

create policy "Users can send messages."
  on public.messages for insert
  with check (auth.uid() = sender_id);
  
create policy "Users can delete their own messages."
  on public.messages for delete
  using (auth.uid() = sender_id);
  
-- Set up Storage bucket for user avatars
insert into storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
values ('files', 'files', true, 5242880, '{"image/jpeg","image/png","image/webp"}')
on conflict (id) do nothing;

-- RLS Policies for storage
create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'files' );

create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'files' );
  
create policy "Users can update their own avatar."
  on storage.objects for update
  using ( auth.uid() = owner )
  with check ( bucket_id = 'files' );
  
create policy "Users can delete their own avatar."
  on storage.objects for delete
  using ( auth.uid() = owner );
