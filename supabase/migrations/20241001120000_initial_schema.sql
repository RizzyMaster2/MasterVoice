
-- Enable http and uuid-ossp extensions
create extension if not exists "http" with schema "extensions";
create extension if not exists "uuid-ossp" with schema "extensions";

-- #################################################################
--
-- Functions and Triggers
--
-- #################################################################

-- Function to create a public profile for a new user
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, display_name, full_name, photo_url, email)
  values (
    new.id,
    new.raw_user_meta_data->>'display_name',
    new.raw_user_meta_data->>'full_name',
    new.raw_user_meta_data->>'avatar_url',
    new.email
  );
  return new;
end;
$$ language plpgsql security definer;

-- Trigger to execute the function upon new user creation
drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- #################################################################
--
-- Tables
--
-- #################################################################

-- Profiles Table
create table if not exists public.profiles (
  id uuid not null primary key,
  created_at timestamp with time zone not null default now(),
  display_name text,
  full_name text,
  email text,
  photo_url text,
  status text,
  bio text,
  constraint profiles_id_fkey foreign key (id) references auth.users (id) on delete cascade
);
alter table public.profiles enable row level security;


-- Friends Table
create table if not exists public.friends (
    user_id uuid not null,
    friend_id uuid not null,
    created_at timestamp with time zone not null default now(),
    primary key (user_id, friend_id),
    constraint friends_user_id_fkey foreign key (user_id) references auth.users(id) on delete cascade,
    constraint friends_friend_id_fkey foreign key (friend_id) references auth.users(id) on delete cascade
);
alter table public.friends enable row level security;


-- Friend Requests Table
create table if not exists public.friend_requests (
    id bigint generated by default as identity primary key,
    sender_id uuid not null,
    receiver_id uuid not null,
    status public.request_status not null default 'pending',
    created_at timestamp with time zone not null default now(),
    constraint friend_requests_sender_id_fkey foreign key (sender_id) references auth.users (id) on delete cascade,
    constraint friend_requests_receiver_id_fkey foreign key (receiver_id) references auth.users (id) on delete cascade,
    constraint unique_friend_request unique (sender_id, receiver_id)
);
alter table public.friend_requests enable row level security;


-- Messages Table
create table if not exists public.messages (
  id bigint generated by default as identity primary key,
  sender_id uuid not null,
  receiver_id uuid not null,
  content text not null,
  created_at timestamp with time zone not null default now(),
  constraint messages_sender_id_fkey foreign key (sender_id) references auth.users (id) on delete cascade,
  constraint messages_receiver_id_fkey foreign key (receiver_id) references auth.users (id) on delete cascade
);
alter table public.messages enable row level security;


-- #################################################################
--
-- Row Level Security (RLS) Policies
--
-- #################################################################

-- Policies for PROFILES table
drop policy if exists "Users can view all profiles." on public.profiles;
create policy "Users can view all profiles." on public.profiles for select using (true);

drop policy if exists "Users can insert their own profile." on public.profiles;
create policy "Users can insert their own profile." on public.profiles for insert with check (auth.uid() = id);

drop policy if exists "Users can update their own profile." on public.profiles;
create policy "Users can update their own profile." on public.profiles for update using (auth.uid() = id) with check (auth.uid() = id);

-- Policies for FRIENDS table
drop policy if exists "Users can view their own friendships." on public.friends;
create policy "Users can view their own friendships." on public.friends for select using (auth.uid() = user_id);

drop policy if exists "Users can create their own friendships." on public.friends;
create policy "Users can create their own friendships." on public.friends for insert with check (auth.uid() = user_id);

drop policy if exists "Users can delete their own friendships." on public.friends;
create policy "Users can delete their own friendships." on public.friends for delete using (auth.uid() = user_id);

-- Policies for FRIEND_REQUESTS table
drop policy if exists "Users can view their own friend requests." on public.friend_requests;
create policy "Users can view their own friend requests." on public.friend_requests for select using (auth.uid() = sender_id or auth.uid() = receiver_id);

drop policy if exists "Users can send friend requests." on public.friend_requests;
create policy "Users can send friend requests." on public.friend_requests for insert with check (auth.uid() = sender_id);

drop policy if exists "Users can update their own friend requests." on public.friend_requests;
create policy "Users can update their own friend requests." on public.friend_requests for update using (auth.uid() = receiver_id);

-- Policies for MESSAGES table
drop policy if exists "Users can view their own messages." on public.messages;
create policy "Users can view their own messages." on public.messages for select using (auth.uid() = sender_id or auth.uid() = receiver_id);

drop policy if exists "Users can send messages." on public.messages;
create policy "Users can send messages." on public.messages for insert with check (auth.uid() = sender_id);

drop policy if exists "Users can delete their own messages." on public.messages;
create policy "Users can delete their own messages." on public.messages for delete using (auth.uid() = sender_id);

-- #################################################################
--
-- Storage
--
-- #################################################################

-- Create storage bucket for files (e.g., avatars)
insert into storage.buckets (id, name, public)
values ('files', 'files', true)
on conflict (id) do nothing;

-- Policies for storage
drop policy if exists "Authenticated users can upload files." on storage.objects;
create policy "Authenticated users can upload files." on storage.objects for insert to authenticated with check (true);

drop policy if exists "Anyone can view files." on storage.objects;
create policy "Anyone can view files." on storage.objects for select to public using (true);
