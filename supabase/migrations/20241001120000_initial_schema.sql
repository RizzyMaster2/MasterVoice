
-- Create a table for public profiles
create table public.profiles (
  id uuid not null references auth.users on delete cascade,
  full_name text,
  display_name text,
  photo_url text,
  bio text,
  status text,
  created_at timestamp with time zone not null default now(),

  primary key (id),
  unique (display_name)
);

-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/auth/row-level-security
alter table public.profiles
  enable row level security;

-- Policies for profiles
drop policy if exists "Public profiles are viewable by everyone." on public.profiles;
create policy "Public profiles are viewable by everyone." on public.profiles
  for select using (true);

drop policy if exists "Users can insert their own profile." on public.profiles;
create policy "Users can insert their own profile." on public.profiles
  for insert with check (auth.uid() = id);

drop policy if exists "Users can update their own profile." on public.profiles;
create policy "Users can update their own profile." on public.profiles
  for update using (auth.uid() = id) with check (auth.uid() = id);

-- This trigger automatically creates a profile entry when a new user signs up.
-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.
drop function if exists public.handle_new_user();
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, full_name, display_name, photo_url, bio, status)
  values (
    new.id,
    new.raw_user_meta_data->>'full_name',
    new.raw_user_meta_data->>'display_name',
    new.raw_user_meta_data->>'photo_url',
    new.raw_user_meta_data->>'bio',
    'online'
  );
  return new;
end;
$$;

-- Drop trigger before creating it
drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- Create table for friends relationship
create table if not exists public.friends (
    user_id uuid not null references public.profiles(id) on delete cascade,
    friend_id uuid not null references public.profiles(id) on delete cascade,
    created_at timestamp with time zone not null default now(),
    primary key (user_id, friend_id)
);

alter table public.friends enable row level security;
create policy "Users can view their own friends." on public.friends
    for select using (auth.uid() = user_id);
create policy "Users can add their own friends." on public.friends
    for insert with check (auth.uid() = user_id);
create policy "Users can remove their own friends." on public.friends
    for delete using (auth.uid() = user_id);

-- Define the custom type for friend request status
create type public.request_status as enum ('pending', 'accepted', 'declined');

-- Create table for friend requests
create table if not exists public.friend_requests (
    id bigint generated by default as identity primary key,
    sender_id uuid not null references public.profiles(id) on delete cascade,
    receiver_id uuid not null references public.profiles(id) on delete cascade,
    status public.request_status not null default 'pending',
    created_at timestamp with time zone not null default now(),
    unique(sender_id, receiver_id)
);

alter table public.friend_requests enable row level security;
create policy "Users can see their own friend requests." on public.friend_requests
    for select using (auth.uid() = sender_id or auth.uid() = receiver_id);
create policy "Users can send friend requests." on public.friend_requests
    for insert with check (auth.uid() = sender_id);
create policy "Users can update their received friend requests." on public.friend_requests
    for update using (auth.uid() = receiver_id);


-- Create table for messages
create table if not exists public.messages (
    id bigint generated by default as identity primary key,
    sender_id uuid not null references public.profiles(id) on delete cascade,
    receiver_id uuid not null references public.profiles(id) on delete cascade,
    content text not null,
    created_at timestamp with time zone not null default now()
);

alter table public.messages enable row level security;
create policy "Users can see messages they send or receive." on public.messages
    for select using (auth.uid() = sender_id or auth.uid() = receiver_id);
create policy "Users can send messages." on public.messages
    for insert with check (auth.uid() = sender_id);
create policy "Users can delete their own messages." on public.messages
    for delete using (auth.uid() = sender_id);


-- Set up Storage!
insert into storage.buckets (id, name, public)
  values ('files', 'files', true)
  on conflict (id) do nothing;

create policy "Public access for files" on storage.objects
  for select using (bucket_id = 'files');

create policy "Users can upload files." on storage.objects
  for insert with check (bucket_id = 'files' and auth.role() = 'authenticated');
  
create policy "Users can update their own files." on storage.objects
  for update with check (bucket_id = 'files' and auth.uid() = owner);

create policy "Users can delete their own files." on storage.objects
    for delete using (auth.uid() = owner);
