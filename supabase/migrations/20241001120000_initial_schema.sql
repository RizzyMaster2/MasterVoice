-- Enable Row Level Security
alter table public.profiles enable row level security;
alter table public.friends enable row level security;
alter table public.friend_requests enable row level security;
alter table public.messages enable row level security;

-- Create Policies for profiles
create policy "Users can view all profiles." on public.profiles for select using (true);
create policy "Users can insert their own profile." on public.profiles for insert with check (auth.uid() = id);
create policy "Users can update their own profile." on public.profiles for update using (auth.uid() = id);

-- Create Policies for friends
create policy "Users can view their own friends." on public.friends for select using (auth.uid() = user_id);
create policy "Users can insert their own friend records." on public.friends for insert with check (auth.uid() = user_id);
create policy "Users can delete their own friendships." on public.friends for delete using (auth.uid() = user_id);

-- Define custom type for friend request status
create type public.request_status as enum ('pending', 'accepted', 'declined');

-- Create friend_requests table
create table if not exists public.friend_requests (
    id bigint generated by default as identity primary key,
    sender_id uuid not null references public.profiles(id) on delete cascade,
    receiver_id uuid not null references public.profiles(id) on delete cascade,
    status public.request_status not null default 'pending',
    created_at timestamp with time zone not null default now(),
    unique(sender_id, receiver_id)
);

-- Create Policies for friend_requests
create policy "Users can see their own friend requests." on public.friend_requests for select using (auth.uid() = sender_id or auth.uid() = receiver_id);
create policy "Users can send friend requests." on public.friend_requests for insert with check (auth.uid() = sender_id);
create policy "Users can update their received friend requests." on public.friend_requests for update using (auth.uid() = receiver_id);


-- Create Policies for messages
create policy "Users can view messages they are part of." on public.messages for select using (auth.uid() = sender_id or auth.uid() = receiver_id);
create policy "Users can send messages." on public.messages for insert with check (auth.uid() = sender_id);
create policy "Users can delete their own messages." on public.messages for delete using (auth.uid() = sender_id);

-- Function to create a profile for a new user
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, full_name, photo_url, email)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url', new.email);
  return new;
end;
$$;

-- Trigger to call the function when a new user signs up
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();
