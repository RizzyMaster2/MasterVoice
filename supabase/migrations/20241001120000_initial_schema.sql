
-- Enable RLS
alter table public.profiles enable row level security;
alter table public.friends enable row level security;
alter table public.friend_requests enable row level security;
alter table public.messages enable row level security;


-- Drop existing policies on profiles to ensure a clean slate
DROP POLICY IF EXISTS "Public profiles are viewable by everyone." ON public.profiles;
DROP POLICY IF EXISTS "Users can insert their own profile." ON public.profiles;
DROP POLICY IF EXISTS "Users can update their own profile." ON public.profiles;

-- Drop existing policies on friends
DROP POLICY IF EXISTS "Users can view their own friendships." ON public.friends;
DROP POLICY IF EXISTS "Users can insert their own friendships." ON public.friends;
DROP POLICY IF EXISTS "Users can delete their own friendships." ON public.friends;

-- Drop existing policies on friend_requests
DROP POLICY IF EXISTS "Users can view their own friend requests." ON public.friend_requests;
DROP POLICY IF EXISTS "Users can create friend requests." ON public.friend_requests;
DROP POLICY IF EXISTS "Users can update their own friend requests." ON public.friend_requests;

-- Drop existing policies on messages
DROP POLICY IF EXISTS "Users can view their own messages." ON public.messages;
DROP POLICY IF EXISTS "Users can insert their own messages." ON public.messages;
DROP POLICY IF EXISTS "Users can delete their own messages." ON public.messages;


-- Drop trigger and function if they exist to handle re-runs
drop trigger if exists on_auth_user_created on auth.users;
drop function if exists public.handle_new_user;

-- Profiles Table
create table if not exists public.profiles (
  id uuid references auth.users not null primary key,
  full_name text,
  display_name text,
  photo_url text,
  bio text,
  status text,
  created_at timestamp with time zone not null default now()
);

-- Friends Table (Direct Relationship)
create table if not exists public.friends (
    user_id uuid references public.profiles(id) on delete cascade not null,
    friend_id uuid references public.profiles(id) on delete cascade not null,
    created_at timestamp with time zone not null default now(),
    primary key (user_id, friend_id)
);

-- Create an enum type for request statuses
create type public.request_status as enum ('pending', 'accepted', 'declined');

-- Friend Requests Table
create table if not exists public.friend_requests (
    id bigint generated by default as identity primary key,
    sender_id uuid references public.profiles(id) on delete cascade not null,
    receiver_id uuid references public.profiles(id) on delete cascade not null,
    status public.request_status not null default 'pending',
    created_at timestamp with time zone not null default now(),
    unique(sender_id, receiver_id)
);

-- Messages Table (Direct Messaging)
create table if not exists public.messages (
    id bigint generated by default as identity primary key,
    sender_id uuid references public.profiles(id) on delete cascade not null,
    receiver_id uuid references public.profiles(id) on delete cascade not null,
    content text not null,
    created_at timestamp with time zone not null default now()
);

-- Function to create a profile for a new user
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, full_name, display_name, photo_url)
  values (
    new.id,
    new.raw_user_meta_data->>'full_name',
    new.raw_user_meta_data->>'display_name',
    new.raw_user_meta_data->>'avatar_url'
  );
  return new;
end;
$$;

-- Trigger to call handle_new_user on new user signup
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- POLICIES

-- Profiles
create policy "Public profiles are viewable by everyone." on public.profiles
  for select using (true);

create policy "Users can insert their own profile." on public.profiles
  for insert with check (auth.uid() = id);

create policy "Users can update their own profile." on public.profiles
  for update using (auth.uid() = id);

-- Friends
create policy "Users can view their own friendships." on public.friends
  for select using (auth.uid() = user_id);

create policy "Users can insert their own friendships." on public.friends
  for insert with check (auth.uid() = user_id);

create policy "Users can delete their own friendships." on public.friends
  for delete using (auth.uid() = user_id);

-- Friend Requests
create policy "Users can manage their own friend requests." on public.friend_requests
  for all using (auth.uid() = sender_id or auth.uid() = receiver_id);


-- Messages
create policy "Users can view their own messages." on public.messages
  for select using (auth.uid() = sender_id or auth.uid() = receiver_id);

create policy "Users can insert their own messages." on public.messages
  for insert with check (auth.uid() = sender_id);

create policy "Users can delete their own messages." on public.messages
  for delete using (auth.uid() = sender_id);
